using System;

//Тетушка Марта решила испечь свой фирменный лимонный пирог.
//Она замесила тесто, выложила его в форму, положила начинку 
//и - внезапный звонок по телефону от любимой подружки.
//Украсить пирог кружочками лимона и поставить в духовку тетушка Марта доверила своему племяннику Васе.

//Когда пирог достали из духовки, тетушка Марта очень сильно огорчилась,
//ведь несколько кружочков лимона попало на корку пирога!!!
//Пирог представляет собой круг радиуса r, с центром в начале координат.
//Пирог состоит из основной части — круга радиуса r - d с центром в начале координат,
//и корки вокруг основной части ширины d. Ломтики лимона тоже представляют собой круги.
//Радиус i-го ломтика лимона равен ri, а центр задается в виде пары(xi, yi).

//Тетушка Марта просит вас помочь определить количество ломтиков лимона,
//попавших на корку. Ломтик лимона попал на корку, если он полностью лежит на корке.

//Внимание!!! Наличие класса, описывающего пирог, с методом проверки попадания обязательно!!! Или класса окружность.

//Формат ввода
//Первая строка содержит два целых числа r и d (0 ≤ d < r ≤ 500), обозначающие радиус пирога и толщину корки соответственно.

//Следующая строка содержит одно целое число n (1 ≤ n ≤ 105), обозначающее количество ломтиков лимона.

//Следующие n строк содержат по три целых числа xi, yi и ri ( - 500 ≤ xi, yi ≤ 500, 0 ≤ ri ≤ 500),
//где xi и yi — координаты центра i-го ломтика лимона, ri — радиус i-го ломтика лимона.

//Формат вывода
//Выведите количество ломтиков лимона, попавших на корочку.

//Пример 1
//Ввод	Вывод
//8 4
//7
//7 8 1
//-7 3 2
//0 2 1
//0 -2 2
//-3 -3 1
//0 6 2
//5 3 1
//2
//Пример 2
//Ввод	Вывод
//10 8
//4
//0 0 9
//0 0 10
//1 0 1
//1 0 2
//0

namespace contest2ndCourse
{
    public class Pie
    {
        public int r;
        public int d;
        public Pie(int r, int d)
        {
            this.r = r;
            this.d = d;
        }
    }
    public class Lemon
    {
        public int x;
        public int y;
        public int r;
        public Lemon(int xi, int yi, int ri)
        {
            x = xi;
            y = yi;
            r = ri;
        }
        public bool Inside(Pie pie)
        {
            double length = Math.Sqrt(this.x * this.x + this.y * this.y);
            if (length - this.r >= pie.r - pie.d && length + this.r <= pie.r)
                return true;
            return false;
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] line = Console.ReadLine().Split();
            int r = int.Parse(line[0]);
            int d = int.Parse(line[1]);
            Pie pie = new Pie(r, d);
            int n = int.Parse(Console.ReadLine());
            int cnt = 0;
            for (int i = 0; i < n; i++)
            {
                line = Console.ReadLine().Split();
                int xi = int.Parse(line[0]);
                int yi = int.Parse(line[1]);
                int ri = int.Parse(line[2]);
                Lemon lemon = new Lemon(xi, yi, ri);
                if (lemon.Inside(pie)) cnt++;
            }
            Console.WriteLine(cnt);
            Console.ReadLine();
        }
    }
}
